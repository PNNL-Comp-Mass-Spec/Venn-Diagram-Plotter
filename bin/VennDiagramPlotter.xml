<?xml version="1.0"?>
<doc>
<assembly>
<name>
VennDiagramPlotter
</name>
</assembly>
<members>
<member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.LoadSettings">
	<summary>
 Loads the settings for the defined Xml Settings File.  Assumes names are not case sensitive
 </summary>
	<return>The function returns a boolean that shows if the file was successfully loaded.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.LoadSettings(System.String)">
	<summary>
 Loads the settings for the defined Xml Settings File.   Assumes names are not case sensitive
 </summary>
	<param name="XmlSettingsFilePath">The path to the XML settings file.</param>
	<return>The function returns a boolean that shows if the file was successfully loaded.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.LoadSettings(System.String,System.Boolean)">
	<summary>
 Loads the settings for the defined Xml Settings File
 </summary>
	<param name="XmlSettingsFilePath">The path to the XML settings file.</param>
	<param name="IsCaseSensitive">Case sensitive names if True.  Non-case sensitive if false.</param>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.SaveSettings">
	<summary>
 Saves the settings for the defined Xml Settings File.  Note that you must call LoadSettings to initialize the class prior to setting any values.
 </summary>
	<return>The function returns a boolean that shows if the file was successfully saved.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.SectionPresent(System.String)">
	<summary>Checks if a section is present in the settings file.</summary>
	<param name="sectionName">The name of the section to look for.</param>
	<return>The function returns a boolean that shows if the section is present.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.String,System.Boolean@)">
	<summary>
 The function gets the name of the "value" attribute in section "sectionName".
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
	<param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
	<return>The function returns the name of the "value" attribute as a String.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Boolean,System.Boolean@)">
	<summary>
 The function gets the name of the "value" attribute in section "sectionName".
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
	<param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
	<return>The function returns boolean True if the "value" attribute is "true".  Otherwise, returns boolean False.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int16,System.Boolean@)">
	<summary>
 The function gets the name of the "value" attribute in section "sectionName".
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
	<param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
	<return>The function returns the name of the "value" attribute as a Short.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int32,System.Boolean@)">
	<summary>
 The function gets the name of the "value" attribute in section "sectionName".
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
	<param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
	<return>The function returns the name of the "value" attribute as an Integer.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Int64,System.Boolean@)">
	<summary>
 The function gets the name of the "value" attribute in section "sectionName".
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
	<param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
	<return>The function returns the name of the "value" attribute as a Long.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Single,System.Boolean@)">
	<summary>
 The function gets the name of the "value" attribute in section "sectionName".
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
	<param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
	<return>The function returns the name of the "value" attribute as a Single.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.GetParam(System.String,System.String,System.Double,System.Boolean@)">
	<summary>
 The function gets the name of the "value" attribute in section "sectionName".
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="valueIfMissing">Value to return if "sectionName" or "keyName" is missing.</param>
	<param name="valueNotPresent">Set to True if "sectionName" or "keyName" is missing.  Returned ByRef.</param>
	<return>The function returns the name of the "value" attribute as a Double.  If "value" is "true" returns -1.  If "value" is "false" returns 0.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.SetIniFilePath(System.String)">
	<summary>
 Legacy function name; calls SetXMLFilePath
 </summary>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.SetXMLFilePath(System.String)">
	<summary>
 The function sets the path to the Xml Settings File.
 </summary>
	<param name="XmlSettingsFilePath">The path to the XML settings file.</param>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.String)">
	<summary>
 The function sets a new String value for the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "value".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Boolean)">
	<summary>
 The function sets a new Boolean value for the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "value".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Int16)">
	<summary>
 The function sets a new Short value for the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "value".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Int32)">
	<summary>
 The function sets a new Integer value for the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "value".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Int64)">
	<summary>
 The function sets a new Long value for the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "value".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Single)">
	<summary>
 The function sets a new Single value for the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "value".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.SetParam(System.String,System.String,System.Double)">
	<summary>
 The function sets a new Double value for the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "value".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.RenameSection(System.String,System.String)">
	<summary>
 The function renames a section.
 </summary>
	<param name="sectionNameOld">The name of the old XML section name.</param>
	<param name="sectionNameNew">The new name for the XML section.</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.#ctor(System.String)">
	<summary>Initializes a new instance of the XMLFileReader (non case-sensitive)</summary>
	<param name="XmlFilename">The name of the XML file.</param>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.#ctor(System.String,System.Boolean)">
	<summary>Initializes a new instance of the XMLFileReader.</summary>
	<param name="XmlFilename">The name of the XML file.</param>
	<param name="IsCaseSensitive">Case sensitive as boolean.</param>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.InitXMLFileReader(System.String,System.Boolean)">
	<summary>
 This routine is called by each of the constructors to make the actual assignments.
 </summary>
</member><member name="P:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.IniFilename">
	<summary>
 Legacy property; calls XmlFilename
 </summary>
</member><member name="P:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.XmlFilename">
	<summary>
 This routine returns the name of the ini file.
 </summary>
	<return>The function returns the name of ini file.</return>
</member><member name="P:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.Initialized">
	<summary>
 This routine returns a boolean showing if the file was initialized or not.
 </summary>
	<return>The function returns a Boolean.</return>
</member><member name="P:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.CaseSensitive">
	<summary>
 This routine returns a boolean showing if the name is case sensitive or not.
 </summary>
	<return>The function returns a Boolean.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.SetNameCase(System.String)">
	<summary>
 This routine sets a name.
 </summary>
	<param name="aName">The name to be set.</param>
	<return>The function returns a string.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.GetRoot">
	<summary>
 Returns the root element of the XML document
 </summary>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.GetLastSection">
	<summary>
 The function gets the last section.
 </summary>
	<return>The function returns the last section as System.Xml.XmlElement.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.GetSection(System.String)">
	<summary>
 The function gets a section as System.Xml.XmlElement.
 </summary>
	<param name="sectionName">The name of a section.</param>
	<return>The function returns a section as System.Xml.XmlElement.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.GetItem(System.String,System.String)">
	<summary>
 The function gets an item.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<return>The function returns a XML element.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.SetIniSection(System.String,System.String)">
	<summary>
 Legacy function name; calls SetXMLSection
 </summary>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.SetXMLSection(System.String,System.String)">
	<summary>
 The function sets the ini section name.
 </summary>
	<param name="oldSection">The name of the old ini section name.</param>
	<param name="newSection">The new name for the ini section.</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.SetIniValue(System.String,System.String,System.String)">
	<summary>
 Legacy function name; calls SetXMLValue
 </summary>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.SetXMLValue(System.String,System.String,System.String)">
	<summary>
 The function sets a new value for the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "value".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.DeleteSection(System.String)">
	<summary>
 The function deletes a section in the file.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<return>The function returns a boolean that shows if the delete was completed.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.DeleteItem(System.String,System.String)">
	<summary>
 The function deletes a item in a specific section.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<return>The function returns a boolean that shows if the delete was completed.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.SetIniKey(System.String,System.String,System.String)">
	<summary>
 Legacy function name; calls SetXmlKey
 </summary>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.SetXmlKey(System.String,System.String,System.String)">
	<summary>
 The function sets a new value for the "key" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value for the "key".</param>
	<return>The function returns a boolean that shows if the change was done.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.GetIniValue(System.String,System.String)">
	<summary>
 Legacy function name; calls GetXMLValue
 </summary>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.GetXMLValue(System.String,System.String)">
	<summary>
 The function gets the name of the "value" attribute.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<return>The function returns the name of the "value" attribute.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.GetIniComments(System.String)">
	<summary>
 Legacy function name; calls GetXmlSectionComments
 </summary>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.GetXmlSectionComments(System.String)">
	<summary>
 The function gets the comments for a section name.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<return>The function returns a string collection with comments</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.SetIniComments(System.String,System.Collections.Specialized.StringCollection)">
	<summary>
 Legacy function name; calls SetXMLComments
 </summary>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.SetXMLComments(System.String,System.Collections.Specialized.StringCollection)">
	<summary>
 The function sets a the comments for a section name.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="comments">A string collection.</param>
	<return>The function returns a Boolean that shows if the change was done.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.UpdateSections">
	<summary>
 The subroutine updades the sections.
 </summary>
</member><member name="P:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.AllSections">
	<summary>
 The subroutine gets the sections.
 </summary>
	<return>The subroutine returns a strin collection of sections.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.GetItemsInSection(System.String,VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.XMLItemTypeEnum)">
	<summary>
 The function gets a collection of items for a section name.
 </summary>
	<param name="sectionName">The name of the section.</param>
	<param name="itemType">Item type.</param>
	<return>The function returns a string colection of items in a section.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.AllKeysInSection(System.String)">
	<summary>The funtions gets a collection of keys in a section.</summary>
	<param name="sectionName">The name of the section.</param>
	<return>The function returns a string colection of all the keys in a section.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.AllValuesInSection(System.String)">
	<summary>The funtions gets a collection of values in a section.</summary>
	<param name="sectionName">The name of the section.</param>
	<return>The function returns a string colection of all the values in a section.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.AllItemsInSection(System.String)">
	<summary>The funtions gets a collection of items in a section.</summary>
	<param name="sectionName">The name of the section.</param>
	<return>The function returns a string colection of all the items in a section.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.GetCustomIniAttribute(System.String,System.String,System.String)">
	<summary>The funtions gets a custom attribute name.</summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="attributeName">The name of the attribute.</param>
	<return>The function returns a string.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.SetCustomIniAttribute(System.String,System.String,System.String,System.String)">
	<summary>The funtions sets a custom attribute name.</summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="attributeName">The name of the attribute.</param>
	<param name="attributeValue">The value of the attribute.</param>
	<return>The function returns a Boolean.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.CreateSection(System.String)">
	<summary>The funtions creates a section name.</summary>
	<param name="sectionName">The name of the section to be created.</param>
	<return>The function returns a Boolean.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.CreateItem(System.String,System.String,System.String)">
	<summary>The funtions creates a section name.</summary>
	<param name="sectionName">The name of the section.</param>
	<param name="keyName">The name of the key.</param>
	<param name="newValue">The new value to be created.</param>
	<return>The function returns a Boolean.</return>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.ManualParseXmlOrIniFile(System.String)">
	<summary>
 Manually read a XML or .INI settings file line-by-line, extracting out any settings in the expected format
 </summary>
	<param name="strFilePath"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.ParseLineManual(System.String,System.Xml.XmlDocument@)">
	<summary>Manually parses a line to extract the settings information
 Supports the traditional .Ini file format
 Also supports the 'key="KeyName" value="Value"' method used in XML settings files
 If success, then adds attributes to the doc object</summary>
	<param name="strLine">The name of the string to be parse.</param>
	<param name="doc">The name of the System.Xml.XmlDocument.</param>
	<returns>True if success, false if not a recognized line format</returns>
	<remarks>Returns True for blank lines</remarks>
</member><member name="P:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.OutputFilename">
	<summary>It Sets or Gets the output file name.</summary>
</member><member name="M:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.Save">
	<summary>It saves the data to the Xml output file.</summary>
</member><member name="P:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.XmlDoc">
	<summary>It gets the System.Xml.XmlDocument.</summary>
</member><member name="P:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader.XML">
	<summary>Converts an XML document to a string.</summary>
	<return>It returns the XML document formatted as a string.</return>
</member><member name="T:VennDiagramPlotter.XmlSettingsFileAccessor.XMLFileReader">
	<summary>
 Tools to manipulates XML Settings files.
 </summary>
</member><member name="M:VennDiagramPlotter.clsProcessFilesBaseClass.CreateSettingsFileIfMissing(System.String,System.String)">
	<summary>
 Verifies that the specified .XML settings file exists in the user's local settings folder
 </summary>
	<param name="strApplicationName">Application name</param>
	<param name="strSettingsFileName">Settings file name</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:VennDiagramPlotter.clsProcessFilesBaseClass.CreateSettingsFileIfMissing(System.String)">
	<summary>
 Verifies that the specified .XML settings file exists in the user's local settings folder
 </summary>
	<param name="strSettingsFilePathLocal">Full path to the local settings file, for example C:\Users\username\AppData\Roaming\AppName\SettingsFileName.xml</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:VennDiagramPlotter.clsProcessFilesBaseClass.GarbageCollectNow">
	<summary>
 Perform garbage collection
 </summary>
	<remarks></remarks>
</member><member name="M:VennDiagramPlotter.clsProcessFilesBaseClass.GarbageCollectNow(System.Int32)">
	<summary>
 Perform garbage collection
 </summary>
	<param name="intMaxWaitTimeMSec"></param>
	<remarks></remarks>
</member><member name="M:VennDiagramPlotter.clsProcessFilesBaseClass.GetAppDataFolderPath(System.String)">
	<summary>
 Returns the full path to the folder into which this application should read/write settings file information
 </summary>
	<param name="strAppName"></param>
	<returns></returns>
	<remarks>For example, C:\Users\username\AppData\Roaming\AppName</remarks>
</member><member name="M:VennDiagramPlotter.clsProcessFilesBaseClass.GetAppFolderPath">
	<summary>
 Returns the full path to the folder that contains the currently executing .Exe or .Dll
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:VennDiagramPlotter.clsProcessFilesBaseClass.GetAppPath">
	<summary>
 Returns the full path to the executing .Exe or .Dll
 </summary>
	<returns>File path</returns>
	<remarks></remarks>
</member><member name="M:VennDiagramPlotter.clsProcessFilesBaseClass.GetAppVersion(System.String)">
	<summary>
 Returns the .NET assembly version followed by the program date
 </summary>
	<param name="strProgramDate"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:VennDiagramPlotter.clsProcessFilesBaseClass.GetSettingsFilePathLocal(System.String,System.String)">
	<summary>
 Returns the full path to this application's local settings file
 </summary>
	<param name="strApplicationName"></param>
	<param name="strSettingsFileName"></param>
	<returns></returns>
	<remarks>For example, C:\Users\username\AppData\Roaming\AppName\SettingsFileName.xml</remarks>
</member>
</members>
</doc>